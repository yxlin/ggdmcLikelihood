% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{compute_likelihood}
\alias{compute_likelihood}
\alias{compute_subject_likelihood}
\title{Compute Likelihood for Behavioural Models}
\usage{
compute_likelihood(dmis, parameter_r, debug = FALSE)

compute_subject_likelihood(dmi, parameter_r, debug = FALSE)
}
\arguments{
\item{dmis}{A List of S4 data model instances (one per subject)}

\item{parameter_r}{A List (one per subject) of or one 'NumericVectors'
containing model parameters}

\item{debug}{Logical flag for debug mode (default = FALSE)}

\item{dmi}{One S4 data model instance (for one subject)}
}
\value{
with:
\itemize{
  \item \code{compute_likelihood} returns a list. Each element is
         the likelihood for a subject. The element in the inner list
         is the likelihood for a condition.
  \item \code{compute_subject_likelihood} returns also a list. Each
         element is the likelihood for a condition.
}
}
\description{
Computes the likelihood for multiple subjects by
aggregating results from individual subject computations.
}
\details{
These functions compute likelihoods for behavioural models, with
\code{compute_subject_likelihood} handling a single subject and
\code{compute_likelihood} handling multiple subjects.

These functions expose the internal mechanism of the design-based
likelihood computation.
}
\examples{
\dontrun{
model <- ggdmcModel::BuildModel(
    p_map = list(A = "1", B = "1", mean_v = "M", sd_v = "1", st0 = "1",
                t0 = "1"),
    match_map = list(M = list(s1 = "r1", s2 = "r2")),
    factors = list(S = c("s1", "s2")),
    constants = c(sd_v = 1, st0 = 0),
    accumulators = c("r1", "r2"),
    type = "lba" )

# You will need to have a data set, 'hdat', either from the real-world or
# from a simulation.
dmis <- ggdmcModel::BuildDMI(hdat, model)
nsubject <- length(unique(hdat$s))
parameters <- list()
for (i in seq_len(nsubject)) {
    new_p_vector <- p_vector[model@pnames]
    parameters[[i]] <- new_p_vector
}

result <- compute_subject_likelihood(sub_dmis[[1]], parameters[[1]], F)
print(result)

result <- compute_likelihood(pop_dmis, parameters, F)
print(result)
}

}
